"""Module for plotting segmentation results from decision tree models.

This module provides functions for visualizing the segmentation results
generated by decision tree models, helping to interpret the model's decisions.
"""

import numpy as np
import pandas as pd
import plotly.graph_objects as go
from plotly.graph_objects import Figure


def plot_single_segmentation_impl(df: pd.DataFrame) -> Figure:
    """Implement the single segmentation plot as a bar chart.

    Parameters
    ----------
    df : pd.DataFrame
        A DataFrame containing the groups defined by the decision tree model.
        columns:
        - `segment_id`: The ID of the segment, for grouping.
        - `segment_name`: (str) the range or category of the feature.
        - `score`: (float) The calculated error metric for the segment.

    Returns
    -------
    Figure
        A bar chart showing each segment with its corresponding avg score, x-axis represents
        the feature segments (segment_name), and y-axis shows the score.

    """
    # Sort by segment_id to ensure consistent ordering
    df_sorted = df.sort_values(by="segment_id")

    # Create a bar chart
    fig = go.Figure(
        data=[
            go.Bar(
                x=df_sorted["segment_name"].astype(str),
                y=df_sorted["score"],
                marker_color=df_sorted["score"],
                text=df_sorted["score"].round(3),
                textposition="auto",
            )
        ]
    )

    # Customize layout
    fig.update_layout(
        title="Segmentation Analysis by Feature",
        xaxis_title="Feature Segments",
        yaxis_title="Error Score",
        template="plotly_white",
        coloraxis_showscale=True,
    )

    return fig


def plot_double_segmentation_impl(df: pd.DataFrame) -> Figure:
    """Implement the double segmentation plot as a heatmap.

    Parameters
    ----------
    df : pd.DataFrame
        A DataFrame containing the groups defined by the decision tree model.
        columns:
        - `segment_id`: The ID of the segment, for grouping.
        - `feature_1`: (str) the range or category of the first feature.
        - `feature_2`: (str) the range or category of the second feature.
        - `score`: (float) The calculated error metric for the segment.

    Returns
    -------
    Figure
        A heatmap showing each segment with its corresponding avg score,
        col of heatmap is feature_1, row is feature_2.

    """
    # Sort by feature values to ensure consistent ordering
    df_sorted = df.sort_values(by=["feature_1", "feature_2"])

    # Pivot the DataFrame to create a matrix suitable for a heatmap
    pivot_table = df_sorted.pivot_table(values="score", index="feature_2", columns="feature_1", aggfunc=np.mean)

    # Create heatmap
    fig = go.Figure(
        data=go.Heatmap(
            z=pivot_table.values,
            x=pivot_table.columns,
            y=pivot_table.index,
            colorscale="Viridis",
            text=np.round(pivot_table.values, 3),
            texttemplate="%{text}",
            colorbar=dict(title="Error Score"),
        )
    )

    # Customize layout
    fig.update_layout(
        title="Double Segmentation Analysis", xaxis_title="Feature 1", yaxis_title="Feature 2", template="plotly_white"
    )

    return fig


def plot_single_segmentation(df: pd.DataFrame) -> Figure:
    """Plot the single segmentation of a given DataFrame as a bar chart.

    Parameters
    ----------
    df : pd.DataFrame
        A DataFrame containing the groups defined by the decision tree model.
        columns:
        - `segment_id`: The ID of the segment, for grouping.
        - `segment_name`: (str) the range or category of the feature.
        - `score`: (float) The calculated error metric for the segment.

    Returns
    -------
    Figure
        A bar chart showing each segment with its corresponding avg score, x-axis represents
        the feature segments (segment_name), and y-axis shows the score.

    """
    return plot_single_segmentation_impl(df)


def plot_double_segmentation(df: pd.DataFrame) -> Figure:
    """Plot the double segmentation of a given DataFrame as a bar chart.

    Parameters
    ----------
    df : pd.DataFrame
        A DataFrame containing the groups defined by the decision tree model.
        columns:
        - `segment_id`: The ID of the segment, for grouping.
        - `feature_1`: (str) the range or category of the first feature.
        - `feature_2`: (str) the range or category of the second feature.
        - `score`: (float) The calculated error metric for the segment.

    Returns
    -------
    Figure
        A heatmap showing each segment with its corresponding avg score,
        col of heatmap is feature_1, row is feature_2.

    """
    return plot_double_segmentation_impl(df)
